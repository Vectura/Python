# Заряжаем обойму нужными патронами. Импортируем (подключаем) в наш код необходимые библиотеки (libs), 
# методы и функции, которые встроены в язык Python
from random import randint
from datetime import datetime
import time
import json
filename = 'gamers.json' #Кладем sioufdhbvousdhfodiuв переменную название файла, в который потом планируем записывать инфо о результатах игры

def WhosWon(a, b):
    if a > b:
        print(f"По итогам 5-ти бросков победил игрок {gamer1['name']} со счетом {a}:{b}")
    elif a < b:
        print(f"По итогам 5-ти бросков победил игрок {gamer2['name']} со счетом {b}:{a}")
    else:
        print(f"По итогам 5-ти бросков победила дружба: {b}:{a}")

# Функция, запускающая считывание строковых данных, введенных пользователем
def InputGamers():
    igr1 = input('Введите имя 1-го играющего ')
    igr2 = input('Введите имя 2-го играющего ')
    return(igr1, igr2) #Запустила и вернула. Нам еще нужно как-то работать с информацией, которую ввел пользователь, поэтому return

# Объявляем переменные для игроков в виде словаря. 
# С этого момента вся программа будет строиться вокруг этих переменных, обращаясь, используя и обновляя данные в этих словарях. 
gamer1 = {'name':'', 'n':[], 'res':0}
gamer2 = {'name':'', 'n':[], 'res':0}

# Запускаем функцию получения имени игроков, возвращенные имена записываем в словарь по ключу 'name'. 
# Почему обращение переменные через запятую: функция будет дважды запрашивать пользователя ввести имя, и, 
# если вызвать функцию для каждой переменной отдельно, то в каждый словарь впишется по 2 имени. В итоге у нас будет игра 2 против 2;)
gamer1['name'], gamer2['name'] = InputGamers() 
gamers = [gamer1, gamer2] #Переменной gamers присвоим список, в который положим наши словари - это упростит в дальнейшем процедуру записи этих словарей в файл

# Оформим функцию, которая будет инициировать бросок кубика. 
# Главное отличие - мы оперируем содержимым словаря, в который записываются итоги броска gamer['n']
def Game(gamer):
    print('Кубик бросает', gamer['name'])
    time.sleep(2)
    gamer['n'].append(randint(1, 6))
    print('Выпало:', gamer['n'][-1])

# Нам нужно инициировать 5 раундов. 
# Для этого запускаем счетчик через встроенную функцию range(), которая возвращает объект, состоящий из пяти последовательных натуральных чисел. 
# В данном случае функции передан обязательный параметр 5 - число, подойдя к которому перечисление останавливается. 
# Таким образом мы получаем 0,1,2,3,4 - 5 чисел, перебирая которые циклом for, мы инициируем нужные нам 5 раундов.
for i in range(5):
# Итак, первый раунд
    Game(gamer1) #вызываем функцию броска кубика для игрока 1
    Game(gamer2) #вызываем функцию броска кубика для игрока 2

# Запускаем проверку результатов и записываем их в соответствующие словари
    if gamer1['n'][-1] > gamer2['n'][-1]:
        gamer1['res'] += 1
        print('Победил в раунде ' + gamer1['name'])
    elif gamer1['n'][-1] < gamer2['n'][-1]: 
        gamer2['res'] += 1
        print('Победил в раунде ' + gamer2['name'])
    else:
        print('Ничья') 
# Раунд завершен, идем на второй круг. И так 5 раз.

# По прохождении 5 раундов вызываем функцию сравнения результатов. 
# Она описана выше. На вход отдаем ей аргументы в виде счетчиков побед из словарей.
print('И побеждает!!!...')
time.sleep(3)
WhosWon(gamer1['res'], gamer2['res'])


# Обернем в функцию инструкцию для записи наших словарей в файл json. 
# Так как сам по себе словарь не годится для записи в файл, для этого мы в начале нашей программы и вызывали библиотеку json - 
# она делает необходимые преобраззования между словарем и форматом json.  

# Конструкция with...as... оборачивает блок инструкций менеджером контекста. 
# По сути эта конструкция нужна для гарантии того, что критическая функция выполнится в любом случае. 
# В контексте нашего кода гарантирует, что файл будет закрыт, что бы ни ввел пользователь. 
# Для простоты восприятия конструкцию можно читать как 'Открыть файл ***.json как переменную file', 
# и затем мы работаем с этой переменной, прописывая к ней нужные нам инструкуции - можно прописать время записи в файл, 
# можно всякие отступы проставить и прочие плюшки. 44444444444
# Параметр 'w'  - это один из множества режимов работы с файлом - создает новый файл, если он не существует, и удаляет, если существует, и создает новый.
def write_to_json(gamer):
    with open('/Users/vectura/Documents/' + filename, 'w', encoding='utf-8') as file:  
        json.dump(gamer, file)

write_to_json(gamers) #вызываем функцию записи в файл, передав в нее наш список со словарями, содержащими данные о наших игроках
